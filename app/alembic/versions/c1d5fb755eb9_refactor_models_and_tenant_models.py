"""refactor(models): and tenant models

Revision ID: c1d5fb755eb9
Revises: ada9e5c94247
Create Date: 2025-04-26 18:22:00.143253

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c1d5fb755eb9'
down_revision = 'ada9e5c94247'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dictionaries',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('ENABLE', 'DISABLE', 'EXPIRED', 'PENDING', 'LOCKED', 'HIDDEN', name='statustypes'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dictionaries_id'), 'dictionaries', ['id'], unique=False)
    op.create_index(op.f('ix_dictionaries_name'), 'dictionaries', ['name'], unique=True)
    op.create_table('invite_codes',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('ENABLE', 'DISABLE', 'EXPIRED', 'PENDING', 'LOCKED', 'HIDDEN', name='statustypes'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('code', name='unique_invite_code')
    )
    op.create_index(op.f('ix_invite_codes_id'), 'invite_codes', ['id'], unique=False)
    op.create_table('dictionary_arguments',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
    sa.Column('label', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('status', sa.Enum('ENABLE', 'DISABLE', 'EXPIRED', 'PENDING', 'LOCKED', 'HIDDEN', name='statustypes'), nullable=False),
    sa.Column('sort', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=False),
    sa.Column('dict_id', sa.Uuid(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['dict_id'], ['dictionaries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dictionary_arguments_id'), 'dictionary_arguments', ['id'], unique=False)
    op.create_table('tenant',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('plan', sa.Enum('FREE', 'BASIC', 'PROFESSIONAL', 'ENTERPRISE', name='tenantplan'), nullable=False),
    sa.Column('status', sa.Enum('ENABLE', 'DISABLE', 'EXPIRED', 'PENDING', 'LOCKED', 'HIDDEN', name='statustypes'), nullable=False),
    sa.Column('dictionaries', sa.Uuid(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
    sa.Column('max_users', sa.Integer(), nullable=False),
    sa.Column('max_teams', sa.Integer(), nullable=False),
    sa.Column('max_storage_gb', sa.Float(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['dictionaries'], ['dictionaries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tenant_id'), 'tenant', ['id'], unique=False)
    op.create_index(op.f('ix_tenant_name'), 'tenant', ['name'], unique=True)
    op.create_table('team_user_join',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('role', sa.Enum('MEMBER', 'MODERATOR', 'ADMIN', 'OWNER', name='roletypes'), nullable=False),
    sa.Column('status', sa.Enum('ENABLE', 'DISABLE', 'EXPIRED', 'PENDING', 'LOCKED', 'HIDDEN', name='statustypes'), nullable=False),
    sa.Column('invite_by', sa.Uuid(), nullable=False),
    sa.Column('invite_code', sa.Uuid(), nullable=False),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_visible', sa.Boolean(), nullable=False),
    sa.Column('custom_title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['invite_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['invite_code'], ['invite_codes.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('team_id', 'user_id', name='unique_team_user')
    )
    op.create_index(op.f('ix_team_user_join_id'), 'team_user_join', ['id'], unique=False)
    op.create_index(op.f('ix_team_user_join_team_id'), 'team_user_join', ['team_id'], unique=False)
    op.create_index(op.f('ix_team_user_join_user_id'), 'team_user_join', ['user_id'], unique=False)
    
    op.add_column('apikey', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('apikey', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('checkpoint_blobs', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('checkpoint_blobs', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('checkpoint_blobs', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('checkpoint_writes', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('checkpoint_writes', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('checkpoint_writes', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('checkpoints', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('checkpoints', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('graph', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('model', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('model', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('model', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('modelprovider', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('modelprovider', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('modelprovider', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('team', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('team', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('team', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('team', sa.Column('tenant_id', sa.Uuid(), nullable=True))
    op.drop_constraint('team_owner_id_fkey', 'team', type_='foreignkey')
    op.create_foreign_key(None, 'team', 'tenant', ['tenant_id'], ['id'])
    op.drop_column('team', 'owner_id')
    op.add_column('thread', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('thread', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('upload', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('upload', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('upload', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('user', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('user', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('user', sa.Column('remark', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True))
    op.add_column('user', sa.Column('status', sa.Enum('ENABLE', 'DISABLE', 'EXPIRED', 'PENDING', 'LOCKED', 'HIDDEN', name='statustypes'), nullable=True))
    op.add_column('user', sa.Column('dictionaries', sa.Uuid(), nullable=True))
    op.add_column('user', sa.Column('corporate_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('user', sa.Column('industry_affiliation', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('user', sa.Column('business_scenarios', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_foreign_key(None, 'user', 'dictionaries', ['dictionaries'], ['id'])
    op.drop_column('user', 'is_active')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_column('user', 'business_scenarios')
    op.drop_column('user', 'industry_affiliation')
    op.drop_column('user', 'corporate_name')
    op.drop_column('user', 'dictionaries')
    op.drop_column('user', 'status')
    op.drop_column('user', 'remark')
    op.drop_column('user', 'updated_at')
    op.drop_column('user', 'created_at')
    op.drop_column('upload', 'remark')
    op.drop_column('upload', 'updated_at')
    op.drop_column('upload', 'created_at')
    op.drop_column('thread', 'remark')
    op.drop_column('thread', 'created_at')
    op.add_column('team', sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'team', type_='foreignkey')
    op.create_foreign_key('team_owner_id_fkey', 'team', 'user', ['owner_id'], ['id'])
    op.drop_column('team', 'tenant_id')
    op.drop_column('team', 'remark')
    op.drop_column('team', 'updated_at')
    op.drop_column('team', 'created_at')
    op.drop_column('modelprovider', 'remark')
    op.drop_column('modelprovider', 'updated_at')
    op.drop_column('modelprovider', 'created_at')
    op.drop_column('model', 'remark')
    op.drop_column('model', 'updated_at')
    op.drop_column('model', 'created_at')
    op.drop_column('graph', 'remark')
    op.drop_column('checkpoints', 'remark')
    op.drop_column('checkpoints', 'updated_at')
    op.drop_column('checkpoint_writes', 'remark')
    op.drop_column('checkpoint_writes', 'updated_at')
    op.drop_column('checkpoint_writes', 'created_at')
    op.drop_column('checkpoint_blobs', 'remark')
    op.drop_column('checkpoint_blobs', 'updated_at')
    op.drop_column('checkpoint_blobs', 'created_at')
    op.drop_column('apikey', 'remark')
    op.drop_column('apikey', 'updated_at')
    op.create_table('memberuploadslink',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('upload_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['member.id'], name='memberuploadslink_member_id_fkey'),
    sa.ForeignKeyConstraint(['upload_id'], ['upload.id'], name='memberuploadslink_upload_id_fkey'),
    sa.PrimaryKeyConstraint('member_id', 'upload_id', name='memberuploadslink_pkey')
    )
    op.create_table('memberskillslink',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('skill_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['member.id'], name='memberskillslink_member_id_fkey'),
    sa.ForeignKeyConstraint(['skill_id'], ['skill.id'], name='memberskillslink_skill_id_fkey'),
    sa.PrimaryKeyConstraint('member_id', 'skill_id', name='memberskillslink_pkey')
    )
    op.create_table('skill',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('managed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('tool_definition', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('input_parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('credentials', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='skill_owner_id_fkey'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], name='skill_team_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='skill_pkey')
    )
    op.create_index('ix_skill_id', 'skill', ['id'], unique=False)
    op.create_table('member',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('backstory', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('position_x', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('position_y', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('source', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('provider', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('model', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('interrupt', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='member_owner_id_fkey'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], name='member_team_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='member_pkey'),
    sa.UniqueConstraint('name', 'team_id', name='unique_team_and_name')
    )
    op.create_index('ix_member_id', 'member', ['id'], unique=False)
    op.drop_index(op.f('ix_team_user_join_user_id'), table_name='team_user_join')
    op.drop_index(op.f('ix_team_user_join_team_id'), table_name='team_user_join')
    op.drop_index(op.f('ix_team_user_join_id'), table_name='team_user_join')
    op.drop_table('team_user_join')
    op.drop_index(op.f('ix_tenant_name'), table_name='tenant')
    op.drop_index(op.f('ix_tenant_id'), table_name='tenant')
    op.drop_table('tenant')
    op.drop_index(op.f('ix_dictionary_arguments_id'), table_name='dictionary_arguments')
    op.drop_table('dictionary_arguments')
    op.drop_index(op.f('ix_invite_codes_id'), table_name='invite_codes')
    op.drop_table('invite_codes')
    op.drop_index(op.f('ix_dictionaries_name'), table_name='dictionaries')
    op.drop_index(op.f('ix_dictionaries_id'), table_name='dictionaries')
    op.drop_table('dictionaries')
    # ### end Alembic commands ###
